<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="group__group__board__libs__platform" kind="group">
    <compoundname>group_board_libs_platform</compoundname>
    <title>XENSIV PAS CO2 Sensor platform functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group__board__libs__platform_1ga79ba3ff2b6d3b6e0d59277ad2c066295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t xensiv_pasco2_plat_i2c_transfer</definition>
        <argsstring>(void *ctx, uint16_t dev_addr, const uint8_t *tx_buffer, size_t tx_len, uint8_t *rx_buffer, size_t rx_len)</argsstring>
        <name>xensiv_pasco2_plat_i2c_transfer</name>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dev_addr</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>tx_buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tx_len</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>rx_buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rx_len</declname>
        </param>
        <briefdescription>
<para>Target platform-specific function to perform I2C write/read transfer. </para>
        </briefdescription>
        <detaileddescription>
<para>Synchronously writes a block of data and optionally receive a block of data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Target platform object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dev_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>device address (7-bit) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tx_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C send data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tx_len</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C send data size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rx_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C receive data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Can be NULL to indicate no read access. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">rx_len</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C receive data size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XENSIV_PASCO2_OK if the I2C transfer was successful; an error indicating what went wrong otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_platform.h" line="56" column="9" bodyfile="xensiv_pasco2_mtb.c" bodystart="163" bodyend="180" declfile="xensiv_pasco2_platform.h" declline="56" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__group__board__libs__platform_1ga30258b2d0b775dd70dac784ba7583a02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t xensiv_pasco2_plat_uart_read</definition>
        <argsstring>(void *ctx, uint8_t *data, size_t len)</argsstring>
        <name>xensiv_pasco2_plat_uart_read</name>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Target platform-specific function to read over UART. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>UART object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Receive buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to receive </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XENSIV_PASCO2_OK if the UART read was successful; an error indicating what went wrong otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_platform.h" line="66" column="9" bodyfile="xensiv_pasco2_mtb.c" bodystart="182" bodyend="206" declfile="xensiv_pasco2_platform.h" declline="66" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__group__board__libs__platform_1ga9300d953c5b0e034b91c1eb35e5b6a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t xensiv_pasco2_plat_uart_write</definition>
        <argsstring>(void *ctx, uint8_t *data, size_t len)</argsstring>
        <name>xensiv_pasco2_plat_uart_write</name>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Target platform-specific function to write over UART. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>UART object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Transmit buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to transmit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XENSIV_PASCO2_OK if the UART write was successful; an error indicating what went wrong otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_platform.h" line="76" column="9" bodyfile="xensiv_pasco2_mtb.c" bodystart="208" bodyend="225" declfile="xensiv_pasco2_platform.h" declline="76" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__group__board__libs__platform_1ga6b0f690782033eb82ac184e541152801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xensiv_pasco2_plat_delay</definition>
        <argsstring>(uint32_t ms)</argsstring>
        <name>xensiv_pasco2_plat_delay</name>
        <param>
          <type>uint32_t</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
<para>Target platform-specific function that waits for a specified time period in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of miliseconds to wait for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_platform.h" line="83" column="6" bodyfile="xensiv_pasco2_mtb.c" bodystart="227" bodyend="230" declfile="xensiv_pasco2_platform.h" declline="83" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__group__board__libs__platform_1ga227451919676d916a38ac90daea339b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t xensiv_pasco2_plat_htons</definition>
        <argsstring>(uint16_t x)</argsstring>
        <name>xensiv_pasco2_plat_htons</name>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Target platform-specific function to reverse the byte order (16-bit) A sample implementation would look like. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">return<sp/>((uint16_t)(((x<sp/>&amp;<sp/>0x00ffU)<sp/>&lt;&lt;<sp/>8)<sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x<sp/>&amp;<sp/>0xff00U)<sp/>&gt;&gt;<sp/>8)));</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to reverse </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_platform.h" line="95" column="10" bodyfile="xensiv_pasco2_mtb.c" bodystart="232" bodyend="235" declfile="xensiv_pasco2_platform.h" declline="95" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__group__board__libs__platform_1ga1a3f8502b60fd6f507b66dc91210b8b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xensiv_pasco2_plat_assert</definition>
        <argsstring>(int expr)</argsstring>
        <name>xensiv_pasco2_plat_assert</name>
        <param>
          <type>int</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Target platform-specific function that implements a runtime assertion; used to verify the assumptions made by the program and take appropiate actions if assumption is false. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression to be verified </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_platform.h" line="102" column="6" bodyfile="xensiv_pasco2_mtb.c" bodystart="237" bodyend="241" declfile="xensiv_pasco2_platform.h" declline="102" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>XENSIV PAS CO2 Sensor platform functions. </para>
    </briefdescription>
    <detaileddescription>
<para>To adapt the driver to your platform you need to provide an implementation for the functions declared in this file. See example implementation in xensiv_pasco2_mtb.c using the PSoC6 HAL. </para>
    </detaileddescription>
  </compounddef>
</doxygen>

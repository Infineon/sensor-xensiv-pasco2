<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>XENSIV™ PAS CO2 sensor</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="index_1md_README"/> </para>
<sect1 id="index_1autotoc_md1">
<title>Overview</title>
<para>This library provides functions for interfacing with the XENSIV™ PAS CO2 sensor.</para>
<para>The sensor features a small form factor with accurate and robust performance at ppm level (±30 ppm ±3% of reading). The XENSIV™ PAS CO2 sensor integrates a photo-acoustic transducer and a microcontroller which runs ppm calculations as well as compensation and configuration algorithms on the PCB.</para>
<sect2 id="index_1autotoc_md2">
<title>Quick start</title>
<para>For the hardware setup, check the &quot;Quick start with the PSoC™ 6 Wi-Fi Bluetooth&amp;reg; pioneer kit&quot; section of the <ulink url="https://www.infineon.com/cms/de/product/sensor/co2-sensors/#!?fileId=5546d4627600a6bc0176041139e77780">Programming guide for XENSIV™ PAS CO2 sensor</ulink>.</para>
<para><image type="html" name="pasco2_i2c_connection.png" inline="yes"></image>
 <image type="latex" name="pasco2_i2c_connection.png" inline="yes"></image>
 <image type="rtf" name="pasco2_i2c_connection.png" inline="yes"></image>
 <image type="docbook" name="pasco2_i2c_connection.png" inline="yes"></image>
</para>
<para><image type="html" name="docs/html/pasco2_i2c_connection.png" inline="yes"></image>
</para>
<para><bold>Figure 1. XENSIV™ PAS CO2 Sensor2Go kit I2C interface connection to the PSoC™ 6 Wi-Fi Bluetooth<registered/> pioneer kit</bold></para>
<para>Do the following to create a simple application which outputs the CO2 ppm data from the sensor to the UART.</para>
<para><orderedlist>
<listitem><para>Create an empty PSoC™ 6 application.</para>
</listitem><listitem><para>Add this library to the application.</para>
</listitem><listitem><para>Add the retarget-io library using the library manager.</para>
</listitem><listitem><para>Place the following code in the <emphasis>main.c</emphasis> file.</para>
</listitem><listitem><para>Define I2C SDA and SCL as appropriate for your hardware configuration:</para>
</listitem><listitem><para>Build the application and program the kit.</para>
</listitem></orderedlist>
</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;cyhal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cybsp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cy_retarget_io.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xensiv_pasco2_mtb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline><highlight class="comment">*<sp/>Macros</highlight></codeline>
<codeline><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_XENSIV_PASCO2_I2C_SDA<sp/><sp/><sp/>NC</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_XENSIV_PASCO2_I2C_SCL<sp/><sp/><sp/>NC</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_MASTER_FREQUENCY<sp/>(100000U)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WAIT_SENSOR_RDY_MS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(2000)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>time<sp/>for<sp/>sensor<sp/>ready<sp/>(milliseconds)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>CO2<sp/>concentration<sp/>value<sp/>acquired<sp/>by<sp/>the<sp/>sensor<sp/>depends<sp/>on<sp/>the<sp/>external<sp/>atmospheric<sp/>pressure.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>To<sp/>compensate<sp/>for<sp/>this<sp/>effect,<sp/>pressure<sp/>values<sp/>can<sp/>be<sp/>acquired<sp/>from<sp/>a<sp/>pressure<sp/>sensor<sp/>such<sp/>as<sp/>an</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/>Infineon<sp/>XENSIV&amp;trade;<sp/>DPS3xx.<sp/>(https://github.com/Infineon/sensor-xensiv-dps3xx)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFAULT_PRESSURE_REF_HPA<sp/><sp/><sp/><sp/>(0x3F7)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Default<sp/>atmospheric<sp/>pressure<sp/>to<sp/>compensate<sp/>for<sp/>(hPa)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline><highlight class="comment">*<sp/>Global<sp/>Variables</highlight></codeline>
<codeline><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>cyhal_i2c_t<sp/>cyhal_i2c;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structxensiv__pasco2__t" kindref="compound">xensiv_pasco2_t</ref><sp/>xensiv_pasco2;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cy_rslt_t<sp/>result<sp/>=<sp/>CY_RSLT_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>device<sp/>and<sp/>board<sp/>peripherals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cybsp_init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CY_ASSERT(result<sp/>==<sp/>CY_RSLT_SUCCESS);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>__enable_irq();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>retarget-io<sp/>to<sp/>use<sp/>the<sp/>debug<sp/>UART<sp/>port.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cy_retarget_io_init(CYBSP_DEBUG_UART_TX,<sp/>CYBSP_DEBUG_UART_RX,<sp/>CY_RETARGET_IO_BAUDRATE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CY_ASSERT(result<sp/>==<sp/>CY_RSLT_SUCCESS);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;XENSIV<sp/>PAS<sp/>CO2<sp/>Example\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>I2C<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cyhal_i2c_cfg_t<sp/>i2c_master_config<sp/>=<sp/>{CYHAL_I2C_MODE_MASTER,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_MASTER_FREQUENCY};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cyhal_i2c_init(&amp;cyhal_i2c,<sp/>PIN_XENSIV_PASCO2_I2C_SDA,<sp/>PIN_XENSIV_PASCO2_I2C_SCL,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CY_ASSERT(result<sp/>==<sp/>CY_RSLT_SUCCESS);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cyhal_i2c_configure(&amp;cyhal_i2c,<sp/>&amp;i2c_master_config);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CY_ASSERT(result<sp/>==<sp/>CY_RSLT_SUCCESS);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cyhal_system_delay_ms(WAIT_SENSOR_RDY_MS);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>PAS<sp/>CO2<sp/>sensor<sp/>with<sp/>default<sp/>parameter<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__group__board__libs__mtb_1gabea706545fb1e82b9e4e568105a23d5b" kindref="member">xensiv_pasco2_mtb_init_i2c</ref>(&amp;xensiv_pasco2,<sp/>&amp;cyhal_i2c);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>CY_RSLT_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;PAS<sp/>CO2<sp/>device<sp/>initialization<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CY_ASSERT(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__group__board__libs__mtb_1ga1f3304bd562b511f18df659342011aea" kindref="member">xensiv_pasco2_mtb_read</ref>(&amp;xensiv_pasco2,<sp/>DEFAULT_PRESSURE_REF_HPA,<sp/>&amp;ppm);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>CY_RSLT_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;CO2<sp/>%d<sp/>ppm.\n&quot;</highlight><highlight class="normal">,<sp/>ppm);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cyhal_system_delay_ms(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="index_1autotoc_md3">
<title>Use the library in your own platform</title>
<para>The library can be used in your own platform by copying three files to your project, i.e., <emphasis>xensiv_pasco2.c</emphasis>, <emphasis>xensiv_pasco2.h</emphasis> and <emphasis>xensiv_pasco2_regs.h</emphasis>.</para>
<para>The library depends on platform-specific implementation of the following functions:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">int32_t<sp/><ref refid="group__group__board__libs_1ga79ba3ff2b6d3b6e0d59277ad2c066295" kindref="member">xensiv_pasco2_plat_i2c_transfer</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>ctx,<sp/>uint16_t<sp/>dev_addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>tx_buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tx_len,<sp/>uint8_t<sp/>*<sp/>rx_buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rx_len);</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/><ref refid="group__group__board__libs_1ga30258b2d0b775dd70dac784ba7583a02" kindref="member">xensiv_pasco2_plat_uart_read</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,<sp/>uint8_t<sp/>*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/><ref refid="group__group__board__libs_1ga9300d953c5b0e034b91c1eb35e5b6a87" kindref="member">xensiv_pasco2_plat_uart_write</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__group__board__libs_1ga6b0f690782033eb82ac184e541152801" kindref="member">xensiv_pasco2_plat_delay</ref>(uint32_t<sp/>ms);</highlight></codeline>
<codeline><highlight class="normal">uint16_t<sp/><ref refid="group__group__board__libs_1ga227451919676d916a38ac90daea339b3" kindref="member">xensiv_pasco2_plat_htons</ref>(uint16_t<sp/>x);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__group__board__libs_1ga1a3f8502b60fd6f507b66dc91210b8b6" kindref="member">xensiv_pasco2_plat_assert</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expr);</highlight></codeline>
</programlisting></para>
<para>The library provides default implementation of these functions. The default implementations should be overridden when using the driver in a target platform. See the implementation for the platform-specific functions in <emphasis>xensiv_pasco2_mtb.c</emphasis> using the PSoC™ 6 HAL.</para>
</sect2>
<sect2 id="index_1autotoc_md4">
<title>More information</title>
<para><itemizedlist>
<listitem><para><ulink url="https://infineon.github.io/sensor-xensiv-pasco2/pasco2_api_reference_manual/html/index.html">PAS CO2 sensor API reference guide</ulink></para>
</listitem><listitem><para><ulink url="https://www.infineon.com/cms/en/product/sensor/co2-sensors/">XENSIV™ PAS CO2 sensor</ulink></para>
</listitem><listitem><para><ulink url="https://www.infineon.com/connectedsensorkit">Connected sensor kit</ulink></para>
</listitem><listitem><para><ulink url="https://www.infineon.com/cms/en/product/evaluation-boards/eval_pasco2_miniboard">EVAL_PASCO2_MINIBOARD</ulink></para>
</listitem><listitem><para><ulink url="https://www.infineon.com">Infineon Technologies website</ulink></para>
</listitem><listitem><para><ulink url="https://github.com/infineon">Infineon Technologies GitHub repos</ulink></para>
</listitem><listitem><para><ulink url="https://www.cypress.com/products/modustoolbox-software-environment">ModusToolbox<trademark/> software</ulink></para>
</listitem></itemizedlist>
</para>
<para><hruler/>
 © Infineon Technologies AG, 2021. </para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>

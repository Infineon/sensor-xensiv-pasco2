<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="group__group__board__libs__mtb" kind="group">
    <compoundname>group_board_libs_mtb</compoundname>
    <title>XENSIV™ PAS CO2 sensor ModusToolbox&amp;trade; interface</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group__board__libs__mtb_1gabea706545fb1e82b9e4e568105a23d5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cy_rslt_t</type>
        <definition>cy_rslt_t xensiv_pasco2_mtb_init_i2c</definition>
        <argsstring>(xensiv_pasco2_t *dev, cyhal_i2c_t *i2c)</argsstring>
        <name>xensiv_pasco2_mtb_init_i2c</name>
        <param>
          <type><ref refid="structxensiv__pasco2__t" kindref="compound">xensiv_pasco2_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>cyhal_i2c_t *</type>
          <declname>i2c</declname>
        </param>
        <briefdescription>
<para>Initializes the XENSIV™ PAS CO2 sensor and configures it to use the specified I2C peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the pressure sensor object. The caller must allocate the memory for this object but the init function will initialize its contents </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">i2c</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an initialized I2C object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CY_RSLT_SUCCESS if properly initialized[, an error indicating what went wrong otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_mtb.h" line="107" column="11" bodyfile="xensiv_pasco2_mtb.c" bodystart="39" bodyend="50" declfile="xensiv_pasco2_mtb.h" declline="107" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__group__board__libs__mtb_1ga628f5739346a7e1babdb03ae51f97a86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cy_rslt_t</type>
        <definition>cy_rslt_t xensiv_pasco2_mtb_init_uart</definition>
        <argsstring>(xensiv_pasco2_t *dev, cyhal_uart_t *uart)</argsstring>
        <name>xensiv_pasco2_mtb_init_uart</name>
        <param>
          <type><ref refid="structxensiv__pasco2__t" kindref="compound">xensiv_pasco2_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>cyhal_uart_t *</type>
          <declname>uart</declname>
        </param>
        <briefdescription>
<para>Initializes the XENSIV™ PAS CO2 sensor, and configures it to use the specified UART peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the pressure sensor object. The caller must allocate the memory for this object but the init function will initialize its contents </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">uart</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an initialized UART object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CY_RSLT_SUCCESS if the initialization was successful; an error indicating what went wrong otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_mtb.h" line="116" column="11" bodyfile="xensiv_pasco2_mtb.c" bodystart="52" bodyend="63" declfile="xensiv_pasco2_mtb.h" declline="116" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__group__board__libs__mtb_1gace71b8639212c85b83adf9178c0b2a73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cy_rslt_t</type>
        <definition>cy_rslt_t xensiv_pasco2_mtb_interrupt_init</definition>
        <argsstring>(const xensiv_pasco2_t *dev, const xensiv_pasco2_interrupt_config_t int_config, uint16_t alarm_threshold, cyhal_gpio_t pin, uint8_t intr_priority, cyhal_gpio_event_callback_t callback, void *callback_arg)</argsstring>
        <name>xensiv_pasco2_mtb_interrupt_init</name>
        <param>
          <type>const <ref refid="structxensiv__pasco2__t" kindref="compound">xensiv_pasco2_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const <ref refid="unionxensiv__pasco2__interrupt__config__t" kindref="compound">xensiv_pasco2_interrupt_config_t</ref></type>
          <declname>int_config</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>alarm_threshold</declname>
        </param>
        <param>
          <type>cyhal_gpio_t</type>
          <declname>pin</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>intr_priority</declname>
        </param>
        <param>
          <type>cyhal_gpio_event_callback_t</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>callback_arg</declname>
        </param>
        <briefdescription>
<para>Configures a GPIO pin as an interrupt for the PAS CO2 sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This initializes and configures the pin as an interrupt, and calls the PAS CO2 interrupt configuration API with the application-supplied settings structure <simplesect kind="note"><para>Should be called only after <ref refid="group__group__board__libs__mtb_1gabea706545fb1e82b9e4e568105a23d5b" kindref="member">xensiv_pasco2_mtb_init_i2c</ref> or <ref refid="group__group__board__libs__mtb_1ga628f5739346a7e1babdb03ae51f97a86" kindref="member">xensiv_pasco2_mtb_init_uart</ref>. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the PAS CO2 sensor device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">int_config</parametername>
</parameternamelist>
<parameterdescription>
<para>New sensor device interrupt configuration to apply </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alarm_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>New alarm threshold value to apply </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin connected to the INT pin of the sensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">intr_priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority for NVIC interrupt events </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the specified event happens. Pass NULL to unregister the handler </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Generic argument that will be provided to the callback when called; can be NULL </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CY_RSLT_SUCCESS if interrupt was successfully enabled; an error occurred while initializing the pin otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_mtb.h" line="131" column="11" bodyfile="xensiv_pasco2_mtb.c" bodystart="65" bodyend="106" declfile="xensiv_pasco2_mtb.h" declline="131" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__group__board__libs__mtb_1ga1f3304bd562b511f18df659342011aea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cy_rslt_t</type>
        <definition>cy_rslt_t xensiv_pasco2_mtb_read</definition>
        <argsstring>(const xensiv_pasco2_t *dev, uint16_t press_ref, uint16_t *co2_ppm_val)</argsstring>
        <name>xensiv_pasco2_mtb_read</name>
        <param>
          <type>const <ref refid="structxensiv__pasco2__t" kindref="compound">xensiv_pasco2_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>press_ref</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>co2_ppm_val</declname>
        </param>
        <briefdescription>
<para>Reads the CO2 value value if available. </para>
        </briefdescription>
        <detaileddescription>
<para>This checks whether a new CO2 value is available, in which case it returns it and sets the new pressure reference value for the next measurement <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the PAS CO2 device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">press_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>New pressure reference value to apply </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">co2_ppm_val</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to populate with the CO2 ppm value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CY_RSLT_SUCCESS if PPM value was successfully read. XENSIV_PASCO2_RSLT_READ_NRDY if the measurement value is not ready yet; an error indicating what went wrong otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_mtb.h" line="147" column="11" bodyfile="xensiv_pasco2_mtb.c" bodystart="108" bodyend="120" declfile="xensiv_pasco2_mtb.h" declline="147" declcolumn="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__group__board__libs__mtb_1ga7914066ba3565838bd631e5dc5974a21" prot="public" static="no">
        <name>CY_RSLT_MODULE_BOARD_HARDWARE_XENSIV_PASCO2</name>
        <initializer>0x01CA</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_mtb.h" line="63" column="9" bodyfile="xensiv_pasco2_mtb.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__board__libs__mtb_1ga017bf447a9133395b4220d32df9d2de4" prot="public" static="no">
        <name>XENSIV_PASCO2_RSLT_ERR_COMM</name>
        <initializer>    (CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CY_RSLT_MODULE_BOARD_HARDWARE_XENSIV_PASCO2, <ref refid="group__group__board__libs_1ga5e84f685d2d853703ecacb7e43292b79" kindref="member">XENSIV_PASCO2_ERR_COMM</ref>))</initializer>
        <briefdescription>
<para>Result code indicating a communication error. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_mtb.h" line="67" column="9" bodyfile="xensiv_pasco2_mtb.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__board__libs__mtb_1gada0ff353d1f842f7228e579f4c0d3a3b" prot="public" static="no">
        <name>XENSIV_PASCO2_RSLT_ERR_WRITE_TOO_LARGE</name>
        <initializer>    (CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CY_RSLT_MODULE_BOARD_HARDWARE_XENSIV_PASCO2, <ref refid="group__group__board__libs_1gab9870212895620e8e0dfaaee561fcbb0" kindref="member">XENSIV_PASCO2_ERR_WRITE_TOO_LARGE</ref>))</initializer>
        <briefdescription>
<para>Result code indicating that an unexpectedly large I2C write was requested which is not supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_mtb.h" line="71" column="9" bodyfile="xensiv_pasco2_mtb.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__board__libs__mtb_1ga95121d811edd118debba05c9c9122b57" prot="public" static="no">
        <name>XENSIV_PASCO2_RSLT_ERR_NOT_READY</name>
        <initializer>    (CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CY_RSLT_MODULE_BOARD_HARDWARE_XENSIV_PASCO2, <ref refid="group__group__board__libs_1ga3b4080fcd4374096aefd559eb8899a52" kindref="member">XENSIV_PASCO2_ERR_NOT_READY</ref>))</initializer>
        <briefdescription>
<para>Result code indicating that the sensor is not yet ready after reset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_mtb.h" line="75" column="9" bodyfile="xensiv_pasco2_mtb.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__board__libs__mtb_1ga19be0326c9e5325638cac12de425d68b" prot="public" static="no">
        <name>XENSIV_PASCO2_RSLT_ICCERR</name>
        <initializer>    (CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CY_RSLT_MODULE_BOARD_HARDWARE_XENSIV_PASCO2, <ref refid="group__group__board__libs_1ga29b2c43f6fbcc00ff7b712b72ca92735" kindref="member">XENSIV_PASCO2_ICCERR</ref>))</initializer>
        <briefdescription>
<para>Result code indicating whether an invalid command has been received by the serial communication interface. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_mtb.h" line="79" column="9" bodyfile="xensiv_pasco2_mtb.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__board__libs__mtb_1ga724500140a2f53ce50a7b53d340d9d39" prot="public" static="no">
        <name>XENSIV_PASCO2_RSLT_ORVS</name>
        <initializer>    (CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CY_RSLT_MODULE_BOARD_HARDWARE_XENSIV_PASCO2, <ref refid="group__group__board__libs_1gab1ace4803195dcfb9bd6a57aec95f8bc" kindref="member">XENSIV_PASCO2_ORVS</ref>))</initializer>
        <briefdescription>
<para>Result code indicating whether a condition where VDD12V has been outside the specified valid range has been detected. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_mtb.h" line="83" column="9" bodyfile="xensiv_pasco2_mtb.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__board__libs__mtb_1ga03f9046a01140c8a9bc90804324f3869" prot="public" static="no">
        <name>XENSIV_PASCO2_RSLT_ORTMP</name>
        <initializer>    (CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CY_RSLT_MODULE_BOARD_HARDWARE_XENSIV_PASCO2, <ref refid="group__group__board__libs_1ga690e80c9cce92a12d6b93510878339b5" kindref="member">XENSIV_PASCO2_ORTMP</ref>))</initializer>
        <briefdescription>
<para>Result code indicating whether a condition where the temperature has been outside the specified valid range has been detected. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_mtb.h" line="87" column="9" bodyfile="xensiv_pasco2_mtb.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__board__libs__mtb_1gac8889466a32f46f61164acda31779d38" prot="public" static="no">
        <name>XENSIV_PASCO2_RSLT_READ_NRDY</name>
        <initializer>    (CY_RSLT_CREATE(CY_RSLT_TYPE_ERROR, CY_RSLT_MODULE_BOARD_HARDWARE_XENSIV_PASCO2, <ref refid="group__group__board__libs_1ga9768e08fad2ee5c8ebaddec5819e7715" kindref="member">XENSIV_PASCO2_READ_NRDY</ref>))</initializer>
        <briefdescription>
<para>Result code indicating that a new CO2 value is not yet ready. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xensiv_pasco2_mtb.h" line="91" column="9" bodyfile="xensiv_pasco2_mtb.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic set of APIs for interacting with the XENSIV™ PAS CO2 sensor. </para>
    </briefdescription>
    <detaileddescription>
<para>This provides basic initialization and access to the CO2 ppm value. It also provides access to the base XENSIV™ PAS CO2 driver for full control.</para>
<para><simplesect kind="note"><para>XENSIV™ PAS CO2 sensor support requires delays. If the RTOS_AWARE component is set or CY_RTOS_AWARE is defined, the HAL driver will defer to the RTOS for delays. Because of this, make sure that the RTOS scheduler has started before calling any functions.</para>
</simplesect>
</para>
<sect1 id="group__group__board__libs__mtb_1subsection_board_libs_snippets">
<title>Code snippets</title>
<sect2 id="group__group__board__libs__mtb_1subsection_board_libs_snippet_1">
<title>Snippet 1: Simple initialization with I2C</title>
<para>The following snippet initializes an I2C instance and the XENSIV™ PAS CO2 sensor, and then reads from the XENSIV™ PAS CO2 sensor. <programlisting filename="xensiv_pasco2_mtb_example.c"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>I2C<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cyhal_i2c_cfg_t<sp/>i2c_master_config<sp/>=<sp/>{CYHAL_I2C_MODE_MASTER,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_MASTER_FREQUENCY};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cyhal_i2c_init(&amp;cyhal_i2c,<sp/>PIN_XENSIV_PASCO2_I2C_SDA,<sp/>PIN_XENSIV_PASCO2_I2C_SCL,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CY_ASSERT(result<sp/>==<sp/>CY_RSLT_SUCCESS);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cyhal_i2c_configure(&amp;cyhal_i2c,<sp/>&amp;i2c_master_config);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CY_ASSERT(result<sp/>==<sp/>CY_RSLT_SUCCESS);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>until<sp/>the<sp/>sensor<sp/>is<sp/>ready<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cyhal_system_delay_ms(WAIT_SENSOR_RDY_MS);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>PAS<sp/>CO2<sp/>sensor<sp/>with<sp/>the<sp/>default<sp/>parameter<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__group__board__libs__mtb_1gabea706545fb1e82b9e4e568105a23d5b" kindref="member">xensiv_pasco2_mtb_init_i2c</ref>(&amp;xensiv_pasco2,<sp/>&amp;cyhal_i2c);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>CY_RSLT_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;PAS<sp/>CO2<sp/>device<sp/>initialization<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CY_ASSERT(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Poll<sp/>PAS<sp/>CO2<sp/>sensor<sp/>data<sp/>ready<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>ppm;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cyhal_system_delay_ms(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__group__board__libs__mtb_1ga1f3304bd562b511f18df659342011aea" kindref="member">xensiv_pasco2_mtb_read</ref>(&amp;xensiv_pasco2,<sp/>DEFAULT_PRESSURE_REF_HPA,<sp/>&amp;ppm);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>CY_RSLT_SUCCESS);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;CO2<sp/>%d<sp/>ppm.\n&quot;</highlight><highlight class="normal">,<sp/>ppm);</highlight></codeline>
</programlisting> </para>
</sect2>
<sect2 id="group__group__board__libs__mtb_1subsection_board_libs_snippet_2">
<title>Snippet 2: XENSIV™ PAS CO2 sensor interrupt configuration</title>
<para>The following snippet demonstrates how to configure a XENSIV™ PAS CO2 sensor interrupt. <programlisting filename="xensiv_pasco2_mtb_example.c"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionxensiv__pasco2__interrupt__config__t" kindref="compound">xensiv_pasco2_interrupt_config_t</ref><sp/>int_config<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="unionxensiv__pasco2__interrupt__config__t_1a773d45d985d2be3ab7d0dabce00ee95e" kindref="member">b</ref>.int_func<sp/>=<sp/><ref refid="group__group__board__libs_1ggaea17466bbef4f0b4f2b06ea8b6ee3bd4a44ce217f8dd88627466fababd822443c" kindref="member">XENSIV_PASCO2_INTERRUPT_FUNCTION_DRDY</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.b.int_typ<sp/>=<sp/><ref refid="group__group__board__libs_1gga1822f1abc722b317d95bbe888fa71855aecc3f516c45cfb08e1c9e5d81ef21c9e" kindref="member">XENSIV_PASCO2_INTERRUPT_TYPE_LOW_ACTIVE</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__group__board__libs__mtb_1gace71b8639212c85b83adf9178c0b2a73" kindref="member">xensiv_pasco2_mtb_interrupt_init</ref>(&amp;xensiv_pasco2,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_config,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_XENSIV_PASCO2_INT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYHAL_ISR_PRIORITY_DEFAULT,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cyhal_gpio_event_callback_t)&amp;xensiv_pasco2_int_cb,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xensiv_pasco2_drdy)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;XENSIV<sp/>PAS<sp/>CO2<sp/>interrupt<sp/>detected\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xensiv_pasco2_drdy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="group__group__board__libs__mtb_1ga1f3304bd562b511f18df659342011aea" kindref="member">xensiv_pasco2_mtb_read</ref>(&amp;xensiv_pasco2,<sp/>DEFAULT_PRESSURE_REF_HPA,<sp/>&amp;ppm);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>CY_RSLT_SUCCESS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;XENSIV<sp/>PAS<sp/>CO2<sp/>read<sp/>failed\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;CO2<sp/>%d<sp/>ppm.\n&quot;</highlight><highlight class="normal">,<sp/>ppm);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cyhal_system_delay_ms(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>

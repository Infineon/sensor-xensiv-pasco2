/***************************************************************************//**
 * \file mtb_pasco2.h
 * \version 0.6.0 (Engineering Samples Release)
 * \brief
 * This file is the public interface of the Infineon PASCO2 sensor.
 *
 ********************************************************************************
 * \copyright
 * Copyright (C) 2021 Infineon Technologies AG. All rights reserved.
 *
 * Infineon Technologies AG (INFINEON) is supplying this file for use
 * exclusively with Infineon's sensor products. This file can be freely
 * distributed within development tools and software supporting such
 * products.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES, FOR ANY REASON
 * WHATSOEVER.

 *******************************************************************************/
/**
********************************************************************************
* \mainpage XENSIV PAS CO2 Library
********************************************************************************
* \note This is an Early Access Software for PASCO2 devices in ModusToolbox. This
* software is made available for evaluation purposes only and is not recommended
* for production development.
* 
* The PASCO2 Library is providing high-level interfaces implemented for the PASCO2 Wingboard 
* connected to the CYSBSYSKIT-DEV-01. This
* provides initialization and access to the CO2 ppm data.
* For more information about the sensor, see:
* https://www.infineon.com/cms/en/product/sensor/co2-sensors/
*
* \note PASCO2 sensor needs pressure values to calculate correct CO2 ppm level. Pressure
* value is read from on-board DPS368 as part of PASCO2 driver.
*
* \note PASCO2 interrupt configuration is not supported on current board.
*
*
*
********************************************************************************
* \section section_pasco2_sensor PAS CO2 Sensor
********************************************************************************
*
* The XENSIV™ PASCO2 is a small CO2 sensor based on Photo Acoustic Spectroscopy
* (PAS) principle. Infineon's high-SNR (69dB) MEMS microphone detects the pressure
* change within the sensor cavity generated by CO₂ molecule and provides the CO₂
* concentration in ppm as the output.
* The small form factor CO2 module and its SMD capability makes it easy to
* integrate into numerous consumer products.
*
* \image html sensor.png "Sensor" width=400px
* \image latex sensor.png
*
*
* \subsection subsection_pasco2_features Features
*
* * Operation range: 400 ppm to 5000 ppm
* * Accuracy: ±30ppm ±3% (of reading between 400 ppm and 5000 ppm)
* * Lifetime: 10 years at 1 measurement/minute
* * Operation temperature: 0-50°C
* * Relative humidity: 0% to 85% (Non-condensing)
* * Interface and compensation: I2C, UART and PWM
* * Supply voltage: 12.0 V for the emitter and 3.3V for the other components
* * Package dimensions: 12.4 x 14 x 7.1 mm³
*
*
*
*********************************************************************************
* \page section_pasco2_configuration PASCO2 library API usage
********************************************************************************
* The Application Programming Interface (API) routines allow controlling and
* executing specific tasks using this binary interface. The PASCO2 API
* is described in the following sections:
* * \ref group_pasco2_high_level
* * \ref group_pasco2_structures
* * \ref group_pasco2_macros
*
* PASCO2 operates on the top of I2C driver, Please refer to the PDL API Reference Manual for more details about I2C driver.
* Following the steps described below, the user can create a simple application which displays the CO2 concentration on serial terminal.
*
* Create a ModusToolbox application and include this library.
* \image html library_manager.png "Library Manager" width=800px
* \image latex library_manager.png
*
* Include the pasco2 library header into application source file and
* define the context object for pasco2 library.
*
* \code
*
* #include "mtb_pasco2.h"
*
* mtb_pasco2_context_t mtb_pasco2_context;
*
* \endcode
*  
* To reduce the power consumption, the sensor remains in off state after power-up and can be turned on by initializing and setting the PASCO2_POWER_SWITCH output pin to High.
* \code
*  #define PASCO2_POWER_SWITCH  (P10_5)
*  // Initialize and enable the power to the sensor 
*  cyhal_gpio_init(PASCO2_POWER_SWITCH, CYHAL_GPIO_DIR_OUTPUT, CYHAL_GPIO_DRIVE_STRONG, true);
* \endcode
*
* The sensor can communicate with MCU using either UART or I2C channels. However, the current version of library only supports I2C interface which is enabled by writing zero to PASCO2_PSEL pin.
* \code
*  #define PASCO2_PSEL    (P5_3)
*  // Initialize and enable I2C channel of the sensor
*  cyhal_gpio_init(PASCO2_PSEL, CYHAL_GPIO_DIR_OUTPUT, CYHAL_GPIO_DRIVE_STRONG, false);
*  // 1 Second delay after turning on the sensor is required by sensor to be ready for communication 
* \endcode
*  
* Initialize I2C channel for communication with sensor.
*
* \code
*  // Initialize I2C channel for CO2 sensor communication 
*  cy_rslt_t result;
*  cyhal_i2c_t cyhal_i2c;
*  cyhal_i2c_cfg_t i2c_config = {.is_slave = false, .address = 0, .frequencyhal_hz = 100000}; // sensor address is not required here
*  result = cyhal_i2c_init(&cyhal_i2c, CYBSP_I2C_SDA, CYBSP_I2C_SCL, NULL);
*  CY_ASSERT(result == CY_RSLT_SUCCESS);
* result = cyhal_i2c_configure(&cyhal_i2c, &i2c_config);
*  CY_ASSERT(result == CY_RSLT_SUCCESS);
* 
* \endcode
*Add following lines to initialize PAS CO2 sensor as well as pressure sensor with default parameters.
*
* \code
*  // Initialize PAS CO2 sensor with default parameter values 
*  result = mtb_pasco2_init(&mtb_pasco2_context, &cyhal_i2c);
*  CY_ASSERT(result == CY_RSLT_SUCCESS);
*
* \endcode
*
*To read the CO2 PPM values following code snippet can be used. Please note that the function provides different results from the sensor as described below:
*
*   **Result Success:** New CO2 value is returned by the sensor.\n
*   **Result Info:** Sensor is busy in internal processing and new value could not be fetched.\n
*   **Result Warning:** This indicates there is an issue with the sensor. If this error persists,
*   Please refer to the datasheet for more information.\n
*
*\code
*  // variable to hold CO2 value
*  uint16_t ppm = 0;
*
*  // get new value from sensor
*  result = mtb_pasco2_get_ppm(&mtb_pasco2_context, &ppm);
*  if (result == CY_RSLT_SUCCESS)
*  {
*    // New CO2 value is successfully read from the sensor and print it to serial console 
*    printf("CO2 PPM Level: %d\r\n", ppm);
*    
*    // add delay before polling for new value i.e same as measurement period 
*    // delay(); 
*  }
*  else if (CY_RSLT_GET_TYPE(result) == CY_RSLT_TYPE_INFO)
*  {
*    // Sensor gave other information instead of CO2 value 
*    if (CY_RSLT_GET_CODE(result) == MTB_PASCO2_PPM_PENDING)
*    {
*     // New value is not available yet 
*      printf("CO2 PPM value is not ready\r\n");
*    }
*    else if (CY_RSLT_GET_CODE(result) == MTB_PASCO2_SENSOR_BUSY)
*    {
*      // Sensor is busy in internal processing 
*      printf("CO2 sensor is busy\r\n");
*    }
*    else
*    {
*      printf("An unexpected occurred when accessing the CO2 sensor\r\n");
*    }
*    
*    // Sensor is polled in 1 second again 
*    // delay();
*  }
*  else if (CY_RSLT_GET_TYPE(result) == CY_RSLT_TYPE_WARNING)
*  {
*    // Sensor gave a warning regarding over-voltage, temperature, or communication problem 
*    switch (CY_RSLT_GET_CODE(result))
*    {
*    case MTB_PASCO2_VOLTAGE_ERROR:
*      // Sensor detected over-voltage problem 
*      printf("CO2 Sensor Over-Voltage Error\r\n");
*      break;
*    case MTB_PASCO2_TEMPERATURE_ERROR:
*      // Sensor detected temperature problem 
*      printf("CO2 Sensor Temperature Error\r\n");
*      break;
*    case MTB_PASCO2_COMMUNICATION_ERROR:
*      // Sensor detected communication problem with MCU 
*      printf("CO2 Sensor Communication Error\r\n");
*      break;
*    default:
*      printf("Unexpected error\r\n");
*      break;
*    }
*    // add delay before polling for new value i.e same as measurement period 
*    // delay(); 
*  }
* \endcode
*
*
* \note User should replace delay function with their own API.
*
* \note For a complete demonstration of the code snippets shown in this file using FreeRTOS, please refer to the ModusToolbox Code Example on pasco2.
*
*
* Sensor measurement period configuration is optional, the default value inside the driver is 10 Seconds. The valid range is [10-4095] Seconds and can be changed using following code snippet.
*
*\code
*  // Optional configuration of CO2 measurement period, valid range is [10-4095] Seconds
*  mtb_pasco2_config_t pas_co2_config = { .measurement_period = 10};
*
*  result = mtb_pasco2_set_config(&mtb_pasco2_context, &pas_co2_config);
*  CY_ASSERT(result == CY_RSLT_SUCCESS);
*  
* \endcode
*
********************************************************************************
* \page group_pasco2_quick_start Quick Start Guide
********************************************************************************
* PASCO2 library is used in ModusToolbox, Refer to the \ref section_pasco2_toolchain.
* The quickest way to get started is using the Code Examples. Infineon
* Semiconductor continuously extends its portfolio of the code examples at the
* <a href="http://www.cypress.com"><b>Cypress Semiconductor website</b></a>
* and at the <a href="https://github.com/cypresssemiconductorco">
* <b>Cypress Semiconductor GitHub</b></a>.
*
* \section group_mtb_pasco2_quick_start_modus PAS CO2 Quick Start Guide
*
* This quick start guide assumes that the environment is configured to use the
* PSoC 6 Peripheral Driver Library(psoc6pdl) for development and the
* library is included in the project.
*
* - Click on New Application option in ModusToolbox to open Project Creator and select CYBSYSKIT-DEV-01.
* \image html project_creator.png "Project Creator" width=800px
* \image latex project_creator.png
*
* - Click on the application to be created: PAS CO2 Application on FreeRTOS and click on Create.
* Once done, the example project is visible on Project Explorer tab. Build and run.
* \image html application_selection.png "Application selection" width=800px
* \image latex application_selection.png
*
* \note Please make sure that the PAS CO2 wingboard is connected to the FeatherKit.
*
*
*
*
*
********************************************************************************
* \section section_pasco2_toolchain Supported Software and Tools
********************************************************************************
*
* This version of the PAS CO2 was validated for compatibility
* with the following Software and Tools:
* <table class="doxtable">
*   <tr>
*     <th>Software and Tools</th>
*     <th>Version</th>
*   </tr>
*   <tr>
*     <td>ModusToolbox Software Environment</td>
*     <td>2.2</td>
*   </tr>
*   <tr>
*     <td>- ModusToolbox Project Creator</td>
*     <td>1.20</td>
*   </tr>
*   <tr>
*     <td>Peripheral Driver Library (PDL)</td>
*     <td>1.5.0</td>
*   </tr>
*   <tr>
*     <td>GCC Compiler</td>
*     <td>9.3.1</td>
*   </tr>
*   <tr>
*     <td>FreeRTOS</td>
*     <td>10.3.1</td>
*   </tr>
* </table>
*
*
********************************************************************************
* \section section_pasco2_memory_usage Memory Usage
********************************************************************************
*
* The PAS CO2 library Flash and RAM memory consumption is as follows:
* * Code Size - 5144 Bytes
* * Data Size - 512 Bytes
*
*
********************************************************************************
* \section section_pasco2_more_information More Information
********************************************************************************
*
* Cypress highly recommends starting with these documents. They can be found on
* the Cypress web site at www.cypress.com.
*
* For more information, refer to the following documents:
*
* * <a href="https://www.cypress.com/products/modustoolbox-software-environment">
*   <b>ModusToolbox Software Environment, Quick Start Guide, Documentation,
*   and Videos</b></a>
*
* * <a href="https://github.com/cypresssemiconductorco"><b>
*   Cypress Semiconductor GitHub</b></a>
*
*
* * <a href="https://www.cypress.com/ModusToolboxDeviceConfig"><b>ModusToolbox
*   Device Configurator Tool Guide</b></a>
*
* * <a href="https://cypresssemiconductorco.github.io/psoc6pdl/pdl_api_reference_manual/html/index.html">
*   <b>PDL API Reference</b></a>
*
* * <a href="http://www.cypress.com"><b>Cypress Semiconductor</b></a>
*
* \note
* The links to another software component's documentation (middleware and PDL)
* point to GitHub to the latest available version of the software.
* To get documentation of the specified version, download from GitHub and unzip
* the component archive. The documentation is available in the <i>docs</i> folder.
*
* \defgroup group_pasco2_high_level               	High Level
* \brief PasCO2 high level interface functions.
*
* \defgroup group_pasco2_macros         			Macros
* \brief Macros for constants and error codes.
*
* \defgroup group_pasco2_structures    				Structures
* \brief Typedefs and structures used in the library.
*
* \cond SECTION_PASCO2_INTERNAL
* \defgroup group_pasco2_internal                 Internal Functions
* \endcond
*
**/

/******************************************************************************/
/** \addtogroup group_pasco2_high_level
* \{
*
* These functions represent the interface between application and sensor library.
*
* These functions perform tasks such as sensor initialization, configuration and data
* reporting.
*
*
* \} */
/******************************************************************************/
/** \addtogroup group_pasco2_structures
* \{
*
*
* \} */

/******************************************************************************/
/** \addtogroup group_pasco2_macros
* \{
*
* Specifies constants used in PAS CO2 library.
*
* \} */

/******************************************************************************/
/** \cond SECTION_PASCO2_INTERNAL */
/** \addtogroup group_pasco2_internal
* \{
*
* The section documents PAS CO2 related internal function.
*
* These function should not be used in the application program.
*
* \} \endcond */

#pragma once

#include "cyhal.h"
#include "cy_result.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 * Macros
 *******************************************************************************/
/******************************************************************************/
/** \addtogroup group_pasco2_macros *//** \{ */
/******************************************************************************/
#define MTB_PASCO2_CONTEXT_SIZE             (512U)		/**< PASCO2 context data size in bytes  */
#define MTB_PASCO2_PPM_PENDING              (1U)		/**< New value is not available from sensor  */
#define MTB_PASCO2_SENSOR_BUSY              (2U)		/**< Sensor is busy in internal processing  */
#define MTB_PASCO2_VOLTAGE_ERROR            (3U)		/**< Voltage out of range error from sensor  */
#define MTB_PASCO2_TEMPERATURE_ERROR        (4U)		/**< Temperature out of range error from sensor  */
#define MTB_PASCO2_COMMUNICATION_ERROR      (5U)		/**< Communication error from sensor  */
#define MTB_PASCO2_CONFIGURATION_ERROR      (6U)		/**< Measurement interval is not in valid range i.e. [10-4095] Seconds  */
#define MTB_PASCO2_SENSOR_NOT_FOUND			(7U)		/**< PAS CO2 Wing board not found  */
#define MTB_PASCO2_SENSOR_NOT_READY			(8U)		/**< PAS CO2 sensor not ready  */
/** \} */

#define MTB_PASCO2_SUCCESS                              CY_RSLT_SUCCESS             /**< Result success */
#define CY_RSLT_MODULE_BOARD_HARDWARE_PASCO2_WING       (0x01C7U)                   /**< PASCO2 module error code */

#define MTB_PASCO2_RESULT_CREATE(type, x)               CY_RSLT_CREATE((type), CY_RSLT_MODULE_BOARD_HARDWARE_PASCO2_WING, (x) ) /**< Create a result value from the specified type, module, and result code */
#define MTB_PASCO2_RESULT_PENDING                       MTB_PASCO2_RESULT_CREATE(CY_RSLT_TYPE_INFO, MTB_PASCO2_PPM_PENDING)   /**< Create a result for sensor value pending */
#define MTB_PASCO2_RESULT_SENSOR_BUSY                   MTB_PASCO2_RESULT_CREATE(CY_RSLT_TYPE_INFO, MTB_PASCO2_SENSOR_BUSY)   /**< Create a result for sensor busy  */
#define MTB_PASCO2_RESULT_VOLTAGE_ERROR                 MTB_PASCO2_RESULT_CREATE(CY_RSLT_TYPE_WARNING, MTB_PASCO2_VOLTAGE_ERROR)              /**< Create a result for sensor voltage error */
#define MTB_PASCO2_RESULT_TEMPERATURE_ERROR             MTB_PASCO2_RESULT_CREATE(CY_RSLT_TYPE_WARNING, MTB_PASCO2_TEMPERATURE_ERROR)          /**< Create a result for sensor temperature error */
#define MTB_PASCO2_RESULT_COMMUNICATION_ERROR           MTB_PASCO2_RESULT_CREATE(CY_RSLT_TYPE_WARNING, MTB_PASCO2_COMMUNICATION_ERROR)        /**< Create a result for sensor communication error */
#define MTB_PASCO2_RESULT_CONFIGURATION_ERROR           MTB_PASCO2_RESULT_CREATE(CY_RSLT_TYPE_ERROR, MTB_PASCO2_CONFIGURATION_ERROR)
#define MTB_PASCO2_RESULT_SENSOR_NOT_FOUND              MTB_PASCO2_RESULT_CREATE(CY_RSLT_TYPE_FATAL, MTB_PASCO2_SENSOR_NOT_FOUND)   /**< Create a result for board not found  */
#define MTB_PASCO2_RESULT_SENSOR_NOT_READY              MTB_PASCO2_RESULT_CREATE(CY_RSLT_TYPE_ERROR, MTB_PASCO2_SENSOR_NOT_READY) /**< Create a result for PAS CO2 sensor not ready  */

/*******************************************************************************
 * Data Types
 *******************************************************************************/
typedef enum 
{
    MTB_PASCO2_OP_MODE_DEFAULT = 0,	    /**< Default mode: Continuous mode */
    MTB_PASCO2_OP_MODE_IDLE = 1, 		/**< Idle mode */
    MTB_PASCO2_OP_MODE_SINGLE = 2, 	    /**< Single shot mode */
    MTB_PASCO2_OP_MODE_CONTINUOUS = 3	/**< Continuous mode */
} mtb_pasco2_op_mode_t;

typedef enum
{
    MTB_PASCO2_BOC_CFG_DEFAULT = 0,     /**< Default BOC configuration: Automatic baseline offset compensation enabled */
    MTB_PASCO2_BOC_CFG_DISABLED = 1,	/**< Automatic baseline offset compensation disabled */
    MTB_PASCO2_BOC_CFG_AUTOMATIC = 2,	/**< Automatic baseline offset compensation enabled */
    MTB_PASCO2_BOC_CFG_FORCED = 3,		/**< Forced compensation */
} mtb_pasco2_boc_cfg_t;

typedef enum
{
    MTB_PASCO2_CMD_SOFT_RESET = 0xA3,		/**< Soft reset the sensor */
    MTB_PASCO2_CMD_RESET_ABOC = 0xBC,	/**< resets the ABOC context */
    MTB_PASCO2_CMD_SAVE_FCS_CALIB_OFFSET = 0xCF,	/**< Saves the force calibration offset into the non volatile memory */
    MTB_PASCO2_CMD_DISABLE_IIR_FILTER = 0xDF,	/**< Disable the stepwise reactive IIR filter */
    MTB_PASCO2_CMD_RESET_FCS = 0xFC,	/**< Resets the forced calibration correction factor */
    MTB_PASCO2_CMD_ENABLE_IIR_FILTER = 0xFE,	/**< Enable the stepwise reactive IIR filter */
} mtb_pasco2_cmd_t;

/******************************************************************************/
/** \addtogroup group_pasco2_structures *//** \{ */
/******************************************************************************/
/** Structure holding the PASCO2 instance specific information. */
/** Only binary interface of driver is available at present. */
typedef struct {
uint8_t internal[MTB_PASCO2_CONTEXT_SIZE]; /**< internal memory buffer to hold sensor context variables*/
} mtb_pasco2_context_t;

/** Structure holding the configuration parameters for PASCO2 sensor. */
typedef struct{
    uint16_t measurement_period; /**<  Measurement period in seconds, default 10s */
    mtb_pasco2_op_mode_t op_mode; /**<  operation mode, default is continuous mode */
    uint16_t calibration_ref; /**<  Calibration reference value of CO2 in ppm*/
    mtb_pasco2_boc_cfg_t boc_cfg; /**<  baseline offset calibration mode, default ABOC */
    bool use_external_pressure_ref; /**< if set to true enables the possibility to provide directly the pressure reference value for the next CO2 measurement 
                                         if set to false the pressure reference value will be read from the DPS3x connected to the same I2C bus as the PAS CO2 sensor */
    uint16_t pressure_ref;  /**< current pressure compensation value */
} mtb_pasco2_config_t;
/** \} */
/******************************************************************************/
/** \addtogroup group_pasco2_high_level *//** \{ */
/******************************************************************************/

/**
 * Initialize the PASCO2 for I2C communication. Then also applies the default
 * configuration settings for both PASCO2 and DPS368 sensors.
 * @note It configures the INT pin to low active. Therefore after mtb_pasco2_init is done, the INT pin drives a constant high level.
 * @param[in,out] context Pointer to a PASCO2 object. The caller must allocate the memory
 *  for this object but the init function will initialize its contents.
 * @param[in] inst I2C instance to use for communicating with the PASCO2 sensor.
 * @return MTB_PASCO2_SUCCESS if properly initialized, else an error indicating what went wrong.
 */
cy_rslt_t mtb_pasco2_init(mtb_pasco2_context_t *context, cyhal_i2c_t *inst);

/**
 * @brief applies reset value to sensor.
 *
 * @param[in] context Pointer to a PASCO2 object.
 * @param[in] cmd value for sensor.
 * @return cy_rslt_t MTB_PASCO2_SUCCESS if the requested reset value is successfully applied, else an error message.
 */
cy_rslt_t mtb_pasco2_command(const mtb_pasco2_context_t *context, mtb_pasco2_cmd_t cmd);

/**
 * @brief Gets the current PASCO2 configuration parameters.
 * 
 * @param[in] context Pointer to a PASCO2 object.
 * @param[out] pas_config configuration structure to hold library parameters.
 * @return cy_rslt_t MTB_PASCO2_SUCCESS if the parameter is copied to pas_config, else an error message.
 */
cy_rslt_t mtb_pasco2_get_config(const mtb_pasco2_context_t *context, mtb_pasco2_config_t *pas_config);

/** Update Gets the current PASCO2 configuration parameters.
 * 
 * @param[in] context Pointer to a PASCO2 object.
 * @param[in] pas_config configuration structure which contains new library parameters.
 * @return cy_rslt_t MTB_PASCO2_SUCCESS if the parameter is set successfully, else an error message.
 */
cy_rslt_t mtb_pasco2_set_config(mtb_pasco2_context_t *context, const mtb_pasco2_config_t *pas_config);

/** Get PASCO2 product and revision id's.
 * The product and revision id is updated only if the result equals MTB_PASCO2_SUCCESS.
 * 
 * @param[in] context context Pointer to a PASCO2 object.
 * @param[out] product_id memory pointer to hold product id.
 * @param[out] revision_id memory pointer to hold revision id.
 * @return cy_rslt_t MTB_PASCO2_SUCCESS if product and revision id is available
 */
cy_rslt_t mtb_pasco2_get_info(const mtb_pasco2_context_t *context, uint8_t *product_id, uint8_t *revision_id);

/** Get current PPM if available. The function will not block or wait until the data is available.
 * The ppm value is updated only if the result equals MTB_PASCO2_SUCCESS.
 * 
 * @param[in] context context Pointer to a PASCO2 object.
 * @param[out] ppm pointer to hold CO2 ppm value.
 * @return cy_rslt_t the status of the get ppm request: MTB_PASCO2_SUCCESS | MTB_PASCO2_RESULT_VOLTAGE_ERROR | MTB_PASCO2_RESULT_TEMPERATURE_ERROR | MTB_PASCO2_RESULT_COMMUNICATION_ERROR | MTB_PASCO2_PPM_PENDING | MTB_PASCO2_SENSOR_BUSY
 */
cy_rslt_t mtb_pasco2_get_ppm(mtb_pasco2_context_t *context, uint16_t *ppm);
/** \} */
#ifdef __cplusplus
}
#endif
